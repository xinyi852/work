package {{version}}

import (
    "free_ssl/internal/services/{{PackageName}}"
    "free_ssl/internal/api/requests"
    "free_ssl/internal/pkg/response"
    {{version}} "free_ssl/internal/api/controllers/{{version}}"
    "github.com/gin-gonic/gin"
)

type {{StructNamePlural}}Controller struct {
    {{version}}.BaseAPIController
}

func (ctrl *{{StructNamePlural}}Controller) Index(c *gin.Context) {
    request := requests.PaginationRequest{}
    if ok := requests.Validate(c, &request, requests.Pagination); !ok {
        return
    }
    {{VariableNamePlural}}, pager := {{PackageName}}.Paginate(c, 10)
    response.JsonSuccess(c, gin.H{
        "list":{{VariableNamePlural}},
        "pager":pager,
    })
}

func (ctrl *{{StructNamePlural}}Controller) Show(c *gin.Context) {
    {{VariableName}}Model := {{PackageName}}.Get(c.Param("id"))
    if {{VariableName}}Model.ID == 0 {
        response.Abort404(c)
        return
    }
    response.JsonSuccess(c, {{VariableName}}Model)
}

func (ctrl *{{StructNamePlural}}Controller) Store(c *gin.Context) {

    request := requests.{{StructName}}Request{}
    if ok := requests.Validate(c, &request, requests.{{StructName}}Store); !ok {
        return
    }

    {{VariableName}}Model := models.{{StructName}}{
        FieldName:      request.FieldName,
    }
    {{VariableName}}Model.Create()
    if {{VariableName}}Model.ID > 0 {
        response.JsonSuccess(c, {{VariableName}}Model)
    } else {
        response.JsonFail(c, response.ErrDefault)
    }
}

func (ctrl *{{StructNamePlural}}Controller) Update(c *gin.Context) {

    {{VariableName}}Model := {{PackageName}}.Get(c.Param("id"))
    if {{VariableName}}Model.ID == 0 {
        response.Abort404(c)
        return
    }

    request := requests.{{StructName}}Request{}
    if ok := requests.Validate(c, &request, requests.{{StructName}}Save); !ok {
        return
    }

    {{VariableName}}Model.FieldName = request.FieldName
    rowsAffected := {{VariableName}}Model.Save()
    if rowsAffected > 0 {
        response.JsonSuccess(c, {{VariableName}}Model)
    } else {
        response.JsonFail(c, response.ErrDefault)
    }
}

func (ctrl *{{StructNamePlural}}Controller) Delete(c *gin.Context) {

    {{VariableName}}Model := {{PackageName}}.Get(c.Param("id"))
    if {{VariableName}}Model.ID == 0 {
        response.Abort404(c)
        return
    }

    rowsAffected := {{VariableName}}Model.Delete()
    if rowsAffected > 0 {
        response.JsonSuccess(c, nil)
        return
    }
    response.JsonFail(c, response.ErrDefault)
}